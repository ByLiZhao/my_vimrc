"Plugins: {{{
call plug#begin('~/.vim/plugged')

" General: {{{
Plug 'morhetz/gruvbox'
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'sjl/gundo.vim'    "undo and redo
" }}}

" Editing Enhancement: {{{
" minor things that make certain things convenient.
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-speeddating'
" different representation of numbers.
Plug 'glts/vim-radical'
Plug 'svermeulen/vim-cutlass' "make cut better
Plug 'svermeulen/vim-yoink' " yank history
Plug 'machakann/vim-highlightedyank' "highlight yank
Plug 'svermeulen/vim-subversive' " replace
Plug 'tomtom/tcomment_vim'  " comments
Plug 'godlygeek/tabular'    "align texts
Plug 'junegunn/vim-easy-align'  "align texts.
" }}}

" Searching: {{{
Plug 'jlanzarotta/bufexplorer'
Plug 'vim-scripts/winmanager'
Plug 'preservim/nerdtree'
Plug 'junegunn/fzf', { 'dir': '~/home_local/src/fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'
" }}}

" Tags: {{{
Plug 'universal-ctags/ctags', {'dir': '~/home_local/src/ctags',
                        \ 'do': './autogen.sh && ./configure --prefix=$HOME/home_local
                        \ && make && make install'}
Plug 'majutsushi/tagbar' "tag displaying.
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'
" }}}

" Completion: {{{
Plug 'Valloric/YouCompleteMe', {'do': 'python3 install.py --clangd-completer --rust-completer'}
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" }}}

" Sessions: {{{
" enhance sessions
Plug 'tpope/vim-obsession'
" working with tmux
Plug 'benmills/vimux'
Plug 'edkolev/tmuxline.vim'
" }}}

" Writing: {{{
Plug 'vim-latex/vim-latex', {'for': 'tex'}
" Syntax highlighting, matching rules and mappings for the original Markdown and extensions
Plug 'plasticboy/vim-markdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
" add an argument text object 'aa' and 'ia'
Plug 'vim-scripts/argtextobj.vim'
" add indentation based text objext 'ii' and 'ai' and 'aI'
Plug 'michaeljsmith/vim-indent-object'
" }}}

" Programming: {{{
Plug 'neomake/neomake'
Plug 'sbdchd/neoformat'
" Documentation tools
Plug 'kkoomen/vim-doge', { 'do': { -> doge#install() } }
Plug 'alpertuna/vim-header'
Plug 'McSinyx/vim-octave'
Plug 'elzr/vim-json'
Plug 'chrisbra/csv.vim'
" }}}

" Project: {{{
Plug 'skywind3000/asyncrun.vim'
" auto set pwd to project rooter
Plug 'airblade/vim-rooter'
Plug 'embear/vim-localvimrc'
Plug 'mh21/errormarker.vim'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
" }}}

" C/C++: {{{
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'ericcurtin/CurtineIncSw.vim'
" }}}

" Python: {{{
Plug 'jmcantrell/vim-virtualenv'
" work with Jupyter notebook
Plug 'jupyter-vim/jupyter-vim'
" }}}

call plug#end()
"}}}

" General: {{{
set nocompatible
filetype plugin on

" Encoding {{{
set fileencodings=utf-8,ucs-bom,shift-jis,latin1,big5,gb18030,gbk,gb2312,cp936
"set everything encoded by utf-8
set fileencoding=utf-8
set encoding=utf-8
set termencoding=utf-8
" }}}

" Colorscheme{{{
syntax enable
colorscheme gruvbox
set background=light
let g:airline_theme='gruvbox'
let g:airline_gruvbox_bf='light'
let g:gruvbox_contrast_light='high'
let g:gruvbox_visibility='high'
" let g:airline_theme='solarized'
" let g:airline_solarized_bg='light'
" let g:solarized_contrast = "high"
" let g:solarized_visibility= "high"
" }}}

" Airline{{{
" If only one tab is opened, show all buffers at the top of the window
" in a tab-like style. They can be switched to use buffer commands.
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_alt_sep = '|'
" }}}

"GUI{{{
if has("gui_running")
        " GUI is running or is about to start,  maximize gvim window.
        " this doesn't work on windows.
        set lines=999 columns=999
endif
set guifontset=
set guifont=Consolas\ 14
set guifontwide=Microsoft\ Yahei\ 14
" }}}

" Folding{{{
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
" }}}

" Indent{{{
filetype indent on " load filetype-specific indent files
" tabstop is the number of spaces a tab counts for. So, when Vim opens a file and reads a <TAB> character,
" it uses that many spaces to visually show the <TAB>.
set tabstop=4       " number of visual spaces per TAB
" softabstop is the number of spaces a tab counts for when editing.
"  So this value is the number of spaces that is inserted when you hit <TAB>
"  and also the number of spaces that are removed when you backspace.
set softtabstop=4   " number of spaces in tab when editing
" expandtab turns <TAB>s into spaces.
" So <TAB> just becomes a shortcut for "insert four spaces".
set expandtab       " tabs are spaces
" }}}

" Visual{{{
set number " show line numbers
set showcmd    " show command in bottom bar
set cursorline          " highlight current line
set wildmenu            " visual autocomplete for command menu
set wildmode=longest:full,full  "matches full match
set lazyredraw          " redraw only when we need to.
set showmatch           " highlight matching [{()}]
let &colorcolumn=join(range(81,999),",") "set background color of line exceeding 81 letters.
set wrap  " will automatically wrap long lines to multiple virtual lines.
set linebreak  "only wrap at a character in the breakat option
set nolist  " list disables linebreak
set textwidth=0 "disable automatic word wrapping
set wrapmargin=0 " prevent Vim from automatically inserting line breaks in newly entered text.
" }}}

" File specific settings {{{
" strips trailing whitespaces at the end of files. this
" is called on buffer write in the autogroup below.
function! <SID>StripTrailingWhitespaces()
        " save last search & cursor position
        let _s=@/
        let l = line(".")
        let c = col(".")
        %s/\s\+$//e
        let @/=_s
        call cursor(l, c)
endfunction

augroup filegroup
        autocmd!
        "clear autocmds for current group
        autocmd VimEnter * highlight clear SignColumn
        autocmd BufEnter,BufNewFile *.tex setlocal spell
        autocmd BufEnter,BufNewFile *.latex setlocal spell
        autocmd BufEnter,BufNewFile *.txt setlocal spell
        autocmd BufEnter,BufNewFile *.text setlocal spell
        autocmd BufEnter,BufNewFile readme setlocal spell
        autocmd BufEnter,BufNewFile ReadMe setlocal spell
        autocmd BufEnter,BufNewFile README setlocal spell
        autocmd BufEnter,BufNewFile Readme setlocal spell
        autocmd BufEnter,BufNewFile *.md setlocal spell
        autocmd BufWritePre *.php,*.py,*.js,*.txt,*.text,*.hs,*.java,readme,README,ReadMe,Readme,*.cpp,*.hpp,*.c,*.h,*vimrc,*.md,*.markdown,*.Markdown,*.MarkDown,*.MD :call <SID>StripTrailingWhitespaces()
        autocmd BufRead,BufNewFile *.c set filetype=c
        autocmd FileType tex setlocal tabstop=2
        autocmd FileType tex setlocal shiftwidth=2
        autocmd FileType tex setlocal softtabstop=2
        autocmd FileType cs setlocal noexpandtab
        autocmd FileType cs setlocal list
        autocmd FileType cs setlocal listchars=tab:+\ ,eol:-
        autocmd FileType cs setlocal formatprg=par\ -w80\ -T4
        autocmd FileType java setlocal noexpandtab
        autocmd FileType java setlocal list
        autocmd FileType java setlocal listchars=tab:+\ ,eol:-
        autocmd FileType java setlocal formatprg=par\ -w80\ -T4
        autocmd FileType php setlocal expandtab
        autocmd FileType php setlocal list
        autocmd FileType php setlocal listchars=tab:+\ ,eol:-
        autocmd FileType php setlocal formatprg=par\ -w80\ -T4
        autocmd FileType ruby setlocal tabstop=2
        autocmd FileType ruby setlocal shiftwidth=2
        autocmd FileType ruby setlocal softtabstop=2
        autocmd FileType ruby setlocal commentstring=#\ %s
        autocmd FileType python setlocal commentstring=#\ %s
        autocmd FileType python setlocal tabstop=4
        autocmd FileType python setlocal shiftwidth=4
        autocmd FileType python setlocal softtabstop=4
        autocmd FileType python setlocal expandtab
        autocmd BufEnter *.cls setlocal filetype=java
        autocmd BufEnter *.zsh-theme setlocal filetype=zsh
        autocmd BufEnter Makefile setlocal noexpandtab
        autocmd BufEnter *.sh setlocal tabstop=2
        autocmd BufEnter *.sh setlocal shiftwidth=2
        autocmd BufEnter *.sh setlocal softtabstop=2
        autocmd BufEnter *.csv setlocal noexpandtab
        autocmd FileType markdown setlocal noexpandtab
        autocmd FileType markdown setlocal tabstop=4
        autocmd FileType markdown setlocal shiftwidth=4
        autocmd FileType markdown setlocal softtabstop=4
        autocmd FileType markdown setlocal spell
augroup END
" }}}

" Backup, swap and undofile {{{
"set writebackup " set backup actually override set writebackup
set backup
let s:backup_dir = expand('$HOME/.vim_temp/backup')
" if backup_dir doesn't exist, create it.
if !isdirectory(s:backup_dir)
        silent! call mkdir(s:backup_dir, 'p')
endif
set backupdir=~/.vim_temp/backup,~/.temp,/var/tmp,/tmp "for backup files
set backupskip+=/tmp/*,/temp/*

let s:swap_dir = expand('~/.vim_temp/swap')
set directory^=~/.vim_temp/swap "append path to head of directory, use absolute path
if !isdirectory(s:swap_dir)
        silent! call mkdir(s:swap_dir, 'p')
endif

set undofile " Maintain undo history between sessions
set undodir=~/.vim_temp/undodir
let s:undo_dir = expand('~/.vim_temp/undodir')
" create undo_dir if not existent.
if !isdirectory(s:undo_dir)
        silent! call mkdir(s:undo_dir, 'p')
endif

" toggle gundo
let g:gundo_prefer_python3 = 1
nnoremap <leader>u :GundoToggle<CR>
" }}}
" }}}

" Editing Enhancement: {{{
" Shortcuts to switch between windows, tabs, buffers, location list, and quick-fix list {{{
" leader-w to loop between windows.
nnoremap <leader>w  <c-w>w
" press [w to previous tab, same as gT,  and ]w to next tab, same as gt
nnoremap <silent> [w <Esc>:update<CR>:tabprevious<CR>
nnoremap <silent> ]w <Esc>:update<CR>:tabnext<CR>
" press [t to previous matched tag,  and ]t to next matched tag.
nnoremap <silent> [t <Esc>:update<CR>:tprevious<CR>
nnoremap <silent> [t <Esc>:update<CR>:tnext<CR>

" press [a to previous file in arglist. ]a to next file in arglist.
nnoremap <silent> [a <Esc>:update<CR>:previous<CR>
nnoremap <silent> ]a <Esc>:update<CR>:next<CR>

" press [b to previous buffer in buffer list,  ]b to next buffer in buffer
" list.
nnoremap <silent> [b <Esc>:update<CR>:bprevious<CR>
nnoremap <silent> ]b <Esc>:update<CR>:bnext<CR>

"press [q to previous location of quick-fix list, and ]q to next location in
"quick-fix list.
nnoremap <silent> [q <Esc>:update<CR>:cprevious<CR>
nnoremap <silent> ]q <Esc>:update<CR>:cnext<CR>

" press [l to previous location of location list,  and ]l to next location.
nnoremap <silent> [l <Esc>:update<CR>:lprevious<CR>
nnoremap <silent> ]l <Esc>:update<CR>:endif<CR> :lnext<CR>
"}}}

" Insert backslash, pairs{{{
" two leader insert one backslash
inoremap <leader><leader> \
" insert () [] {} <> pairings.
inoremap <leader>( ()<Left>
inoremap <leader>[ []<Left>
inoremap <leader>{ {}<Left>
inoremap <leader>< <><Left>
inoremap <leader>" ""<Left>
inoremap <leader>' ''<Left>
inoremap <leader>` ``<Left>
" italic in markdown
inoremap <leader>- **<Left>
" Bold in markdown
inoremap <leader>_ ****<Left><Left>
" type jj to move out of surroudings.
inoremap jj <right>
" }}}

" Change pairs{{{
" Use vim-surround manipulate surroudings.
" use 'cs"'' to change double quote to single quote.
" use 'cst"' to change xml tag to double quote
" use 'ds"' to remote double quote
" use 'ys<text-object><surrounding-marker>' to add surrounding
" 'ysiwb' equals to 'ysiw)'
" 'yasb' wraps the current sentence in ().
" 'S<surrounding-marker>' in visual mode add surrounding to the selected
" }}}

"Select between pairs.{{{
"select everything between surroundings,
" Notice that with nested surroundings, following commands are different from
" "va(" or "va)". 'va(' and 'va)' matches the surrounding contains the cursor.
" select between brackets.
" cursor at (, matching innermost nearest )
nnoremap <leader>( <Esc>/)<CR>:nohlsearch<CR>v[(
" cursor at ), matching nearest (
nnoremap <leader>) <Esc>?(<CR>:nohlsearch<CR>v])
"select between square bracket
" cursor at [, matching nearest ]
nnoremap <leader>[ <Esc>/]<CR>:nohlsearch<CR>v%
" cursor at ], matching nearest [
nnoremap <leader>] <Esc>?[<CR>:nohlsearch<CR>v%
"select between braces
" cursor at {, matching nearest }
nnoremap <leader>{ <Esc>/}<CR>:nohlsearch<CR>v[{
" cursor at }, matching nearest {
nnoremap <leader>} <Esc>?{<CR>:nohlsearch<CR>v]}
" }}}

" Cut: vim-cutlass {{{
" gm to add marker, because m is remapped
" vim's built-in gm command is shadowed.
nnoremap gm m
" set vim-cutlass
" let m, mm, and M denote "move"
nnoremap m d
xnoremap m d
nnoremap mm dd
nnoremap M D
" }}}

" Yank: vim-yoink{{{
" immediately after performing a paste,
" one can cycle through the history by hitting <c-n> and <c-p>
let g:yoinkIncludeDeleteOperations = 1
nmap <c-p> <plug>(YoinkPostPasteSwapBack)
nmap <c-n> <plug>(YoinkPostPasteSwapForward)
nmap p <plug>(YoinkPaste_p)
" notice that the below P is the capital P
nmap P <plug>(YoinkPaste_P)
" hitting <c-=> after a paste will toggle between formatted and unformatted
" unformatted is default
nmap <c-=> <plug>(YoinkPostPasteToggleFormat)
" }}}

" Replace: vim-subsersive{{{
" define new text object, ie = inner entire buffer
" only use it with vim-subsersive.
onoremap ie :exec "normal! ggVG"<cr>
" s for substitute an text object with content in the register.
nmap s <plug>(SubversiveSubstitute)
nmap ss <plug>(SubversiveSubstituteLine)
nmap S <plug>(SubversiveSubstituteToEndOfLine)

" example: <leader>siwip to replace all instances of the current word under the cursor
" that exist within the paragraph under the cursor.
" <leader>sl_ to replace all instances of the character under the cursor on the current line.
nmap <leader>s <plug>(SubversiveSubstituteRange)
" first select the current word with 'viw', replace all instance of it in the
" current parapgrah by '<leader>sip
xmap <leader>s <plug>(SubversiveSubstituteRange)
" replace current word, only match complete words, for example, '<leader>ssip'
" replaces all instances of current word in the current paragraph, but only
" with perfect matching.
nmap <leader>ss <plug>(SubversiveSubstituteWordRange)
"}}}

" Align: EasyAlign{{{
" Start interactive EasyAlign in visual mode (e.g. vipga=)
" align around "=" in a paragraph.
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip=),
" align around "=" in a paragraph.
" nmap ga <Plug>(EasyAlign)
"}}}

" Other: vim-radical, vim-speedating, vim-repeat
" vim-radical use gA to show four different representations of a number.
" use <ctrl-a> to increase date and <ctrl-x> to decrease date under the
" cursor.
"}}}

" Searching:  {{{
" Setup Vim's search{{{
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>
" search repeated words.
nnoremap <leader>rw <Esc>: /\(\<\w\+\>\)\_s*\<\1\><CR>
" }}}

"  Ack{{{
if executable('rg')
        let g:ackprg = 'rg --vimgrep --smart-case'
endif
" open ack.vim
nnoremap <leader>a :Ack!<Space>
" }}}

" FZF{{{
" makes it work like CtrlP
let g:fzf_action = {
                        \ 'ctrl-s': 'split',
                        \ 'ctrl-v': 'vsplit'
                        \ }
" override the pagedown hotkey
"enable multiple selection with tab and <shift-tab>
nnoremap <leader>f :FZF -m<cr>
augroup fzf
        autocmd!
        autocmd! FileType fzf
        autocmd  FileType fzf set laststatus=0 noshowmode noruler
                                \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup END
" }}}

" BufExplorer, Nerdtree{{{
" disable default key mapping for BufExplorer.
let g:bufExplorerDisableDefaultKeyMapping=1
" sort buffer by file extensions.
let g:bufExplorerSortBy='extension'
let g:winManagerWindowLayout = "BufExplorer"
let g:winManagerWidth = 40
nnoremap <leader>b :WMToggle<cr>
nnoremap - :NERDTreeToggle<CR>
" }}}
" }}}

" Tags: {{{
" launch tagbar
nnoremap <leader>t :TagbarToggle<cr>
"set vim-gutentags
" enable gtags module, depending on GNU global,
" for languages natively supported by gtags, don't use pygments
let $GTAGSLABEL = 'native-pygments'
" for languages not natively supported by gtags, use pygments, which can be installed by pip
let $GTAGSCONF = '/home/johnzli/home_local/share/gtags/gtags.conf'

let g:gutentags_modules = ['ctags', 'gtags_cscope']

"set root of project folder
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
"name of tags file
let g:gutentags_ctags_tagfile = '.tags'
" put tag files in the following folder
let s:vim_tags = expand('~/.vim_temp/tags')
" create it if not existent.
if !isdirectory(s:vim_tags)
        silent! call mkdir(s:vim_tags, 'p')
endif
let g:gutentags_cache_dir = '~/.vim_temp/tags'
"set ctags parameters
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" for universal ctags only, not exuberant ctags
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']


" disable key mappings by gutentags_plus
let g:gutentags_plus_nomap = 1
" Find symbol (reference) under cursor
noremap <silent> <leader>gs :GscopeFind s <C-R><C-W><cr>
" Find symbol definition under cursor
noremap <silent> <leader>gg :GscopeFind g <C-R><C-W><cr>
" Functions calling this function
noremap <silent> <leader>gc :GscopeFind c <C-R><C-W><cr>
" Function called by this function
noremap <silent> <leader>gd :GscopeFind d <C-R><C-W><cr>
" Find this text string
noremap <silent> <leader>gt :GscopeFind t <C-R><C-W><cr>
" Find this egrep pattern
noremap <silent> <leader>ge :GscopeFind e <C-R><C-W><cr>
" Find file name under cursor
noremap <silent> <leader>gf :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
" Find files #including the file under the cursor
noremap <silent> <leader>gi :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
" Find places where this symbol is assigned a value
noremap <silent> <leader>ga :GscopeFind a <C-R><C-W><cr>
" Find current word in ctags database
noremap <silent> <leader>gz :GscopeFind z <C-R><C-W><cr>
" }}}

" Completion: {{{
" Spell {{{
set spell spelllang=en_us
set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words
set spellfile=~/.vim/spell/lizhao-spell.add
" for word completeion
inoremap <F2> <C-x><C-k>
" launch word correction menu
nnoremap <F2> z=
" }}}

" YouCompleteMe{{{
" set python interpreter for ycm server
let g:ycm_server_python_interpreter='/usr/bin/python3'

" do not show detail information of a completion candidate in a top window
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_complete_in_comments = 1

" press <F1> or the right button of the mouse in normal mode to show documentation
" of the identifier under cursor.
nmap <F1> <plug>(YCMHover)
nmap <RightMouse> <plug>(YCMHover)

" Let clangd fully control code completion
" Use installed clangd, not YCM-bundled clangd which doesn't get updates.
let g:ycm_clangd_binary_path = exepath("clangd")
" use clangd's caching and filtering algorithm
let g:ycm_clangd_uses_ycmd_caching = 0

"no diagnostic message
let g:ycm_show_diagnostics_ui = 0
let g:ycm_use_ultisnips_completer = 1
" }}}

" Snips{{{
" config ulti-snips
let g:UltiSnipsExpandTrigger="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-h>"
" }}}
" }}}

" Sessions: {{{
" allows cursor change in tmux mode. Show cursor as a vertical bar in Tmux
" instead of a block
if exists('$TMUX')
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" let vim use aliases defined in .zshrc
" this causes error when vim launched from terminal
"set shellcmdflag=-ic
" }}}

" Writing: {{{
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
autocmd BufRead,BufNewFile *.tex set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_ViewRule_pdf ='okular --unique'
let g:Tex_CompileRule_pdf = 'pdflatex -synctex=-1 -src-specials -interaction=nonstopmode $*'
autocmd FileType tex nnoremap <Leader>lb :<C-U>exec '!bibtex '.Tex_GetMainFileName(':p:t:r')<CR>
function! SyncTexForward()
        let execstr = "silent !okular --unique %:p:r.pdf\#src:".line(".")."%:p &"
        exec exec execstr
endfunction
autocmd FileType tex nnoremap <Leader>ls :call SyncTexForward()<CR>
" do not use any marker for tex files.
let g:neomake_tex_enabled_makers = []
" press <F3> in normal mode will sync syntax from start
autocmd FileType tex nnoremap <F3> <Esc>:syntax sync fromstart<CR>

" markdown-preview.nvim
let g:mkdp_auto_start = 1 "open preview window automatically
autocmd FileType markdown nnoremap <leader>lv :MarkdownPreview
autocmd FileType markdown nnoremap <leader>ls :MarkdownPreviewStop
" press <F3> in normal mode will sync syntax from start
autocmd FileType markdown nnoremap <F3> <Esc>:syntax sync fromstart<CR>
" }}}

" Programming: {{{
" Neomake and Neoformat {{{
"open the error and warning list automatically:
let g:neomake_open_list = 2
let g:neoformat_only_msg_on_error = 1 "only msg when there is an error

" use F10 toggle quick fix window
function! ToggleQuickFix()
        if empty(filter(getwininfo(), 'v:val.quickfix'))
                copen
        else
                cclose
        endif
endfunction
nnoremap <silent> <F10> :call ToggleQuickFix()<cr>

"toggle Neomake with F11
nnoremap <F11> <Esc>:NeomakeToggle<CR>
inoremap <F11> <Esc>:NeomakeToggle<CR>
"invoke the formatter for current buffer
nnoremap <F12> <Esc>:Neoformat<CR>
inoremap <F12> <Esc>:Neoformat<CR>

function! MyOnBattery()
        if filereadable('/sys/class/power_supply/AC/online')
                return readfile('/sys/class/power_supply/AC/online') == ['0']
        else
                return '1'=='0'
        endif
endfunction

if MyOnBattery()
        " When writing a buffer (no delay)
        call neomake#configure#automake('w')
else
        " When writing a buffer (no delay), and on normal mode changes (after 1000ms).
        call neomake#configure#automake('nw', 1000)
endif
"}}}

" vim-doge{{{
" do not enable built-in key mappings
let g:doge_enable_mappings = 0
" use ',,' as the default mapping.
nmap ,, <Esc>:DogeGenerate<CR>
let g:doge_mapping = ',,'
" only jusmping among items in normal mode
let g:doge_comment_jump_modes =['n']
"}}}

" vim-header: {{{
" do not auto add header
let g:header_field_author = 'John Z. Li (李昭)'
let g:header_field_author_email = 'lizhao.johnlee@gmail.com'
let g:header_auto_add_header = 0
let g:header_field_timestamp = 0
let g:header_field_modified_timestamp = 0
let g:header_field_modified_by = 0
" }}}
" }}}

" Project: {{{
" Building: {{{
" make related custom commands.
" Run "make" asynchronously
command AsyncMake AsyncRun -cwd=<root> make -j$(nproc)
" Run "make run" asynchronously.
command AsyncMakeRun AsyncRun -cwd=<root> -mode=term -pos=right -raw make run
" Run "make test" asynchronously.
command AsyncMakeTest AsyncRun -cwd=<root> -mode=term -pos=right make test
" Run "make clean" asynchronously.
command AsyncMakeClean AsyncRun -cwd=<root> -mode=term -pos=right -raw make clean

" Cmake related custom commands.
" :CMake creates a build directory and generates cmake project
command CMake AsyncRun -cwd=<root> -mode=term -pos=right -raw mkdir -p build&& cd build&& cmake ..
" :CMakeBuild builds current cmake project in subdirectory build.
command CMakeBuild AsyncRun -cwd=<root> cmake --build build -j $(nproc)
" :CMakeInstall install the built project, CMake 3.15+ only
command CMakeInstall AsyncRun -cwd=<root> -mode=term -pos=right -raw cmake --install build
" :CMakeClean removes the whole build directory
command CMakeClean AsyncRun -cwd=<root> -mode=term -pos=right -raw rm -rf build
" :CMakeTest to run all the test
command CMakeTest AsyncRun -cwd=<root> -mode=term -pos=right -raw cd build& ctest
" }}}

" AsyncRun:{{{
" asyncrun root markers.
let g:asyncrun_rootmarks = ['.svn', '.git', '.root', '_darcs', 'build.xml', '.project']

" open quick fix after async_run
let g:asyncrun_open = 6

" ring when async_run returns
let g:asyncrun_bell = 1

" let errormarker work with Asyncrun
let g:asyncrun_auto = "make"

" let AsyncRun work with airline
let g:asyncrun_status = ''
let g:airline_section_error = airline#section#create_right(['%{g:asyncrun_status}'])

" let AsyncRun work with makeprg.
" Asyncrun first pick up the command specified by vim's "makeprg", then add
" any arguments passed by the user. The resulted command is executed in a
" vim terminal at last.
command! -bang -nargs=* -complete=file Make AsyncRun -program=make @ <args>

" let AsyncRun work with vim-fugitive
" run 'Gpush' and 'Gfetch' through AsyncRun.
command! -bang -bar -nargs=* Gpush execute 'AsyncRun<bang> -cwd=' .
                        \ fnameescape(FugitiveGitDir()) 'git push' <q-args>
command! -bang -bar -nargs=* Gfetch execute 'AsyncRun<bang> -cwd=' .
                        \ fnameescape(FugitiveGitDir()) 'git fetch' <q-args>
" }}}

" Rooter: {{{
" Rooter
let g:rooter_patterns = ['.svn', '.git', '.root', '*.sln', 'build/env.sh']
let g:rooter_manual_only = 1 "manual only
nnoremap <leader>rt :Rooter<CR>:pwd<CR>
" }}}
" }}}

" C/C++: {{{
"switch header
nnoremap <leader>h :Rooter<CR>:call CurtineIncSw()<CR>
"C
let g:c_syntax_for_h=1
let g:neomake_c_enabled_makers = ['clang']
let g:neomake_c_clang_maker = {
                        \ 'exe': 'clang',
                        \ 'args': ['-Wall', '-Wextra', '-fsyntax-only',
                        \ '-Wno-error=unused-command-line-argument',
                        \ '-Qunused-arguments',
                        \ '-fwrapv', '-fno-delete-null-pointer-checks', '-pthread',
                        \ '-I', '.', '-I', 'src', '-I', 'include', '-I', '..',
                        \ ],
                        \ }
let g:neoformat_enabled_c = ['clangformat']
"C++
let g:neomake_cpp_enabled_makers = ['clang', 'cppcheck']
" add -fsyntax-only to supress clang amke *.gch files.
let g:neomake_cpp_clang_maker = {
                        \ 'exe': 'clang++',
                        \ 'args': ['-Wall', '-Wextra', '-fsyntax-only',
                        \ '-Wno-error=unused-command-line-argument',
                        \ '-Qunused-arguments',
                        \ '-fno-exceptions', '-fwrapv', '-fno-delete-null-pointer-checks',
                        \ '-pthreads',
                        \ '-Wno-sign-conversion',
                        \ '-Wno-zero-as-null-pointer-constant',
                        \ '-Wno-padded', '-Wno-unused-parameter',
                        \ '-I', '.', '-I', 'src', '-I', 'include', '-I', '..',
                        \ ],
                        \ }

let g:neoformat_enabled_cpp = ['clangformat']


" rename the variable under cursor
autocmd FileType cpp nnoremap <leader>rn :YcmCompleter RefactorRename<space>
autocmd FileType c nnoremap <leader>rn :YcmCompleter RefactorRename<space>

" Press F3 to delete object file and executable file.
autocmd FileType cpp nnoremap <silent> <F3> :AsyncRun -cwd=$(VIM_FILEDIR) rm -f $VIM_PATHNOEXT $VIM_PATHNOEXT.o <cr>
autocmd FileType c nnoremap <silent> <F3> :AsyncRun -cwd=$(VIM_FILEDIR) rm -f $VIM_PATHNOEXT $VIM_PATHNOEXT.o <cr>

" define the following for cpp, c and java  projects
" Press F4 to compile current buffer
autocmd  FileType cpp nnoremap <silent> <F4> :AsyncRun g++ -Wall -Wextra
                        \ -fno-exceptions -fwrapv -fno-delete-null-pointer-checks
                        \ -pthread -O2
                        \ -Wno-sign-conversion
                        \ -Wno-zero-as-null-pointer-constant
                        \ -Wno-padded -Wno-unused-parameter
                        \ -I. -I src -I include -I..
                        \ "$(VIM_FILEPATH)" -o  "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>

autocmd  FileType cpp nnoremap <silent> <leader>c :AsyncRun g++ -Wall -Wextra
                        \ -fno-exceptions -fwrapv -fno-delete-null-pointer-checks
                        \ -pthread -O2
                        \ -Wno-sign-conversion
                        \ -Wno-zero-as-null-pointer-constant
                        \ -Wno-padded -Wno-unused-parameter
                        \ -I. -I src -I include -I..
                        \ "$(VIM_FILEPATH)" -c <cr>

autocmd  FileType c nnoremap <silent> <F4> :AsyncRun gcc -Wall -Wextra
                        \ -fwrapv -fno-delete-null-pointer-checks -pthread -O2
                        \ -I. -I src -I include -I..
                        \ "$(VIM_FILEPATH)" -o  "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>

autocmd FileType c nnoremap <silent> <leader>c :AsyncRun gcc -Wall -Wextra
                        \ -fwrapv -fno-delete-null-pointer-checks -pthread -O2
                        \ -I. -I src -I include -I..
                        \ "$(VIM_FILEPATH)" -c <cr>

" Press F5 run the executable from current file
autocmd  FileType cpp nnoremap <silent> <F5> :AsyncRun -mode=term -pos=right -raw -cwd=$(VIM_FILEDIR) "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>
autocmd  FileType c nnoremap <silent> <F5> :AsyncRun -mode=term -pos=right -raw -cwd=$(VIM_FILEDIR) "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>

" Press F6 to Looks up the current line for a header and jumps to it.
" work with c, cpp, objc, objcpp, cuda
autocmd  FileType cpp nnoremap <silent> <F6> :YcmCompleter GoToInclude <cr>
autocmd  FileType c nnoremap <silent> <F6> :YcmCompleter GoToInclude <cr>
autocmd  FileType cuda nnoremap <silent> <F6> :YcmCompleter GoToInclude <cr>

" Press F7 to Looks up the symbol under the cursor and jumps to its declaration.
" Supported in filetypes: c, cpp, objc, objcpp, cuda, cs, go, java, javascript, python, rust, typescript
autocmd  FileType cpp nnoremap <silent> <F7> :YcmCompleter GoToDeclaration <cr>
autocmd  FileType c nnoremap <silent> <F7> :YcmCompleter GoToDeclaration <cr>
autocmd  FileType cuda nnoremap <silent> <F7> :YcmCompleter GoToDeclaration <cr>

" Press F8 to kooks up the symbol under the cursor and jumps to its definition
" Supported in filetypes: c, cpp, objc, objcpp, cuda, cs, go, java, javascript, python, rust, typescript
" For C-family languages, only works when the definition is in current TU.
autocmd  FileType cpp nnoremap <silent> <F8> :YcmCompleter GoToDefinition <cr>
autocmd  FileType c nnoremap <silent> <F8> :YcmCompleter GoToDefinition <cr>
autocmd  FileType cuda nnoremap <silent> <F8> :YcmCompleter GoToDefinition <cr>

" Press F9 jump to a header, or definition, or declaration.
autocmd FileType cpp nnoremap <silent> <F9> :YcmCompleter GoTo<CR>
autocmd FileType c nnoremap <silent> <F9> :YcmCompleter GoTo<CR>

" cpp highlight
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_concepts_highlight = 1
" let g:cpp_no_function_highlight = 1

" }}}

" Python: {{{
" Python
let g:jupyter_mapkeys = 0 " disable default key mappings.
" press F4 to connect current python file to a Jupyter console in a terminal on the right and change the working directory of Jupyter to current folder of the file.
autocmd FileType python nnoremap <silent> <F4> :vert term ++shell jupyter console<CR> <C-w><C-r> <Esc> <C-w><C-p> :sleep 1<CR> :JupyterConnect<CR>
" press F5 to execute current file
autocmd  FileType python nnoremap <silent> <F5> :JupyterRunFile<CR>
" press F6 to send current cell, cursor will jump to next block
autocmd FileType python nnoremap <silent> <F6> :JupyterSendCell<CR>:set nowrapscan<CR>:/##/<CR>j:nohlsearch<CR>:set wrapscan<CR>
" press F7 to run code that is visual selected
autocmd FileType python vmap <silent> <F7> <Plug>JupyterRunVisual
" press F8 to run code object of current "paragraph".
autocmd FileType python nmap <silent> <F7> vap<Plug>JupyterRunVisual
" press F8 to add a breaking point at the current line.
autocmd FileType python nnoremap <silent> <F8> :PythonSetBreak<CR>
" press F9 go to definition of the token under cursor.
autocmd  FileType python nnoremap <silent> <F9> :YcmCompleter GoToDefinition <cr>

"python
let g:neomake_python_enabled_makers = ['python','pylint']
let g:neomake_python_python_exe = 'python3'
let g:neomake_python_pylint_exe = 'python3'
let g:neomake_python_pylint_maker = {
                        \ 'args': [
                        \ '-d', 'C0103, C0111',
                        \ '-f', 'text',
                        \ '--msg-template="{path}:{line}:{column}:{C}: [{symbol}] {msg}"',
                        \ '-r', 'n'
                        \ ],
                        \ 'errorformat':
                        \ '%A%f:%l:%c:%t: %m,' .
                        \ '%A%f:%l: %m,' .
                        \ '%A%f:(%l): %m,' .
                        \ '%-Z%p^%.%#,' .
                        \ '%-G%.%#',
                        \ }

let g:neoformat_enabled_python = ['yapf']
let g:neoformat_python_yapf= {
                        \ 'exe': 'yapf3',
                        \ }
" }}}

" Bash: {{{
" for bash
let g:neomake_shell_enabled_makers = ['shellcheck']
" }}}

" Some useful shortcuts: {{{
" " move vertically by visual line
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" toggle between number and relativenumber
function! ToggleNumber()
        if(&relativenumber == 1)
                set norelativenumber
                set number
        else
                set relativenumber
        endif
endfunc
nnoremap <leader>n :call ToggleNumber()<CR>

" jk is escape
inoremap jk <esc>
" Press j and k to enter terminal normal mode.
tnoremap jk <C-\><C-n>

" Press F1 quit terminal window from insert mode
tnoremap <F1> <C-\><C-n>:q! <cr>
" <leader>t to open a terminal on the right, ready to type
nnoremap <leader>x <Esc>: vert term <CR> <C-w><C-r>

" leave insert mode  with the <RightMouse>-key,  convenient when work on
" laptop.
inoremap <RightMouse> <Esc>

" press <F3> in visual mode to execute the selected as shell command in a vim
" terminal
xnoremap <F3> "xy:term<CR><c-w>"x<CR>

" Press <F3> to enter "overstrike" mode in insert mode
inoremap <F3> <insert>

" edit vimrc/zshrc and load vimrc bindings
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" change pwd to the folder of the current file, and echo
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
"  }}}

" Useful shortcuts to input special character {{{
" don't access menu by using alt key combinations
" for example,  don't use alt-f to access file menu
set winaltkeys=no

" because the terminal emulator might treat Alt key as a way to input escape sequence.
" Greek letters, Alt-g family: {{{
if has("gui_running")
        " greek letters
        "  <a-g>J <a-g>j  <a-g>V, and <a-g>v are not mapped
        " for there are only 24 Greek letters.
        " alpha and capital alpha. α, Α
        inoremap <a-g>a <c-v>u03b1
        inoremap <a-g>A <c-v>u0391
        " beta and capital beta, β, Β
        inoremap <a-g>b <c-v>u03b2
        inoremap <a-g>B <c-v>u0392
        " chi and capital chi, χ, Χ
        inoremap <a-g>c <c-v>u03c7
        inoremap <a-g>C <c-v>u03a7
        "delta and capital delta, δ, Δ
        inoremap <a-g>d <c-v>u03b4
        inoremap <a-g>D <c-v>u0394
        " epsilon and capital epsilon, ε, Ε
        inoremap <a-g>e <c-v>u03b5
        inoremap <a-g>E <c-v>u0395
        " phi and capital phi, φ, Φ
        inoremap <a-g>f <c-v>u03c6
        inoremap <a-g>F <c-v>u03a6
        " gamma and capital gamma, γ, Γ
        inoremap <a-g>g <c-v>u03b3
        inoremap <a-g>G <c-v>u0393
        " eta and capital eta, η, Η
        inoremap <a-g>h <c-v>u03b7
        inoremap <a-g>H <c-v>u0397
        " iota and capital iota, ι, Ι
        inoremap <a-g>i <c-v>u03b9
        inoremap <a-g>I <c-v>u0399
        " kappa and capital kappa, κ, Κ
        inoremap <a-g>k <c-v>u03ba
        inoremap <a-g>K <c-v>u039a
        " lambda and capital lambda, λ, Λ
        inoremap <a-g>l <c-v>u03bb
        inoremap <a-g>L <c-v>u039b
        " mu and capital mu, μ, Μ
        inoremap <a-g>m <c-v>u03bc
        inoremap <a-g>M <c-v>u039c
        " nu and capital nu, ν, Ν,
        inoremap <a-g>n <c-v>u03bd
        inoremap <a-g>N <c-v>u039d
        " omicron and capital omicron, ο, Ο
        inoremap <a-g>o <c-v>u03bf
        inoremap <a-g>O <c-v>u039f
        " pi and capital pi, π, Π
        inoremap <a-g>p <c-v>u03c0
        inoremap <a-g>P <c-v>u03a0
        " theta and capital theta, θ, Θ
        inoremap <a-g>q <c-v>u03b8
        inoremap <a-g>Q <c-v>u0398
        " rho and capital rho, ρ, Ρ
        inoremap <a-g>r <c-v>u03c1
        inoremap <a-g>R <c-v>u03a1
        " sigma and capital sigma, σ, Σ
        inoremap <a-g>s <c-v>u03c3
        inoremap <a-g>S <c-v>u03a3
        " tau and capital tau, τ, Τ
        inoremap <a-g>t <c-v>u03c4
        inoremap <a-g>T <c-v>u03a4
        " upsilon and capital upsilon, υ, Ϋ
        inoremap <a-g>u <c-v>u03c5
        inoremap <a-g>U <c-v>u03ab
        " omega and capital omega, ω, Ω
        inoremap <a-g>w <c-v>u03c9
        inoremap <a-g>W <c-v>u03a9
        " xi and capital xi, ξ, Ξ
        inoremap <a-g>x <c-v>u03be
        inoremap <a-g>X <c-v>u039e
        " psi and capital psi, ψ, Ψ
        inoremap <a-g>y <c-v>u03c8
        inoremap <a-g>Y <c-v>u03a8
        " zeta and capital zeta, ζ, Ζ
        inoremap <a-g>z <c-v>u03b6
        inoremap <a-g>Z <c-v>u0396
endif
" }}}

" GUI menu for Greek letters: {{{
if has("gui_running")
        inoremenu Literate.Greek\ Letters.α(alpha):\ <a-g>a  <c-v>u03b1
        inoremenu Literate.Greek\ Letters.Α(Alpha):\ <a-g>A  <c-v>u0391
        inoremenu Literate.Greek\ Letters.β(beta):\ <a-g>b   <c-v>u03b2
        inoremenu Literate.Greek\ Letters.Β(Beta):\ <a-g>B   <c-v>u0392
        " chi and capital chi, χ, Χ
        inoremenu Literate.Greek\ Letters.χ(chi):\ <a-g>c    <c-v>u03c7
        inoremenu Literate.Greek\ Letters.Χ(Chi):\ <a-g>C    <c-v>u03a7
        "delta and capital delta, δ, Δ
        inoremenu Literate.Greek\ Letters.δ(delta):\ <a-g>d  <c-v>u03b4
        inoremenu Literate.Greek\ Letters.Δ(Delta):\ <a-g>D  <c-v>u0394
        " epsilon and capital epsilon, ε, Ε
        inoremenu Literate.Greek\ Letters.ε(epsilon):\ <a-g>e <c-v>u03b5
        inoremenu Literate.Greek\ Letters.Ε(Epsilon):\ <a-g>E <c-v>u0395
        " phi and capital phi, φ, Φ
        inoremenu Literate.Greek\ Letters.φ(phi):\ <a-g>f <c-v>u03c6
        inoremenu Literate.Greek\ Letters.Φ(Phi):\ <a-g>F <c-v>u03a6
        " gamma and capital gamma, γ, Γ
        inoremenu Literate.Greek\ Letters.γ(gamma):\ <a-g>g <c-v>u03b3
        inoremenu Literate.Greek\ Letters.Γ(Gamma):\ <a-g>G <c-v>u0393
        " eta and capital eta, η, Η
        inoremenu Literate.Greek\ Letters.η(eta):\ <a-g>h <c-v>u03b7
        inoremenu Literate.Greek\ Letters.Η(Eta):\ <a-g>H <c-v>u0397
        " iota and capital iota, ι, Ι
        inoremenu Literate.Greek\ Letters.ι(iota):\ <a-g>i <c-v>u03b9
        inoremenu Literate.Greek\ Letters.Ι(Iota):\ <a-g>I <c-v>u0399
        " kappa and capital kappa, κ, Κ
        inoremenu Literate.Greek\ Letters.κ(kappa):\ <a-g>k <c-v>u03ba
        inoremenu Literate.Greek\ Letters.Κ(Kappa):\ <a-g>K <c-v>u039a
        " lambda and capital lambda, λ, Λ
        inoremenu Literate.Greek\ Letters.λ(lambda):\ <a-g>l <c-v>u03bb
        inoremenu Literate.Greek\ Letters.Λ(Lambda):\ <a-g>L <c-v>u039b
        " mu and capital mu, μ, Μ
        inoremenu Literate.Greek\ Letters.μ(mu):\ <a-g>m <c-v>u03bc
        inoremenu Literate.Greek\ Letters.Μ(Mu):\ <a-g>M <c-v>u039c
        " nu and capital nu, ν, Ν,
        inoremenu Literate.Greek\ Letters.ν(nu):\ <a-g>n <c-v>u03bd
        inoremenu Literate.Greek\ Letters.Ν(Nu):\ <a-g>N <c-v>u039d
        " omicron and capital omicron, ο, Ο
        inoremenu Literate.Greek\ Letters.ο(omicron):\ <a-g>o <c-v>u03bf
        inoremenu Literate.Greek\ Letters.Ο(Omicron):\ <a-g>O <c-v>u039f
        " pi and capital pi, π, Π
        inoremenu Literate.Greek\ Letters.π(pi):\ <a-g>p <c-v>u03c0
        inoremenu Literate.Greek\ Letters.Π(Pi):\ <a-g>P <c-v>u03a0
        " theta and capital theta, θ, Θ
        inoremenu Literate.Greek\ Letters.θ(theta):\ <a-g>q <c-v>u03b8
        inoremenu Literate.Greek\ Letters.Θ(Theta):\ <a-g>Q <c-v>u0398
        " rho and capital rho, ρ, Ρ
        inoremenu Literate.Greek\ Letters.ρ(rho):\ <a-g>r <c-v>u03c1
        inoremenu Literate.Greek\ Letters.Ρ(Rho):\ <a-g>R <c-v>u03a1
        " sigma and capital sigma, σ, Σ
        inoremenu Literate.Greek\ Letters.σ(sigma):\ <a-g>s <c-v>u03c3
        inoremenu Literate.Greek\ Letters.Σ(Sigma):\ <a-g>S <c-v>u03a3
        " tau and capital tau, τ, Τ
        inoremenu Literate.Greek\ Letters.τ(tau):\ <a-g>t <c-v>u03c4
        inoremenu Literate.Greek\ Letters.Τ(Tau):\ <a-g>T <c-v>u03a4
        " upsilon and capital upsilon, υ, Ϋ
        inoremenu Literate.Greek\ Letters.υ(upsilon):\ <a-g>u <c-v>u03c5
        inoremenu Literate.Greek\ Letters.Ϋ(Upsilon):\ <a-g>U <c-v>u03ab
        " omega and capital omega, ω, Ω
        inoremenu Literate.Greek\ Letters.ω(omega):\ <a-g>w <c-v>u03c9
        inoremenu Literate.Greek\ Letters.Ω(Omega):\ <a-g>W <c-v>u03a9
        " xi and capital xi, ξ, Ξ
        inoremenu Literate.Greek\ Letters.ξ(xi):\ <a-g>x <c-v>u03be
        inoremenu Literate.Greek\ Letters.Ξ(Xi):\ <a-g>X <c-v>u039e
        " psi and capital psi, ψ, Ψ
        inoremenu Literate.Greek\ Letters.ψ(psi):\ <a-g>y <c-v>u03c8
        inoremenu Literate.Greek\ Letters.Ψ(Psi):\ <a-g>Y <c-v>u03a8
        " zeta and capital zeta, ζ, Ζ
        inoremenu Literate.Greek\ Letters.ζ(zeta):\ <a-g>z <c-v>u03b6
        inoremenu Literate.Greek\ Letters.Ζ(Zeta):\ <a-g>Z <c-v>u0396
endif
" }}}

" Superscript: Alt-p family: {{{
if has("gui_running")
        " x¹
        inoremap <a-p>1 <c-v>u00b9
        " x²
        inoremap <a-p>2 <c-v>u00b2
        " x³
        inoremap <a-p>3 <c-v>u00b3
        " x⁴
        inoremap <a-p>4 <c-v>u2074
        " x⁵
        inoremap <a-p>5 <c-v>u2075
        " x⁶
        inoremap <a-p>6 <c-v>u2076
        " x⁷
        inoremap <a-p>7 <c-v>u2077
        " x⁸
        inoremap <a-p>8 <c-v>u2078
        " x⁹
        inoremap <a-p>9 <c-v>u2079
        " x⁰
        inoremap <a-p>0 <c-v>u2070
        " x⁻, minus
        inoremap <a-p>- <c-v>u207b
        " x⁺, plus
        inoremap <a-p>+ <c-v>u207a
        " x⁼
        inoremap <a-p>= <c-v>u207c
        " x⁽, left parenthesis
        inoremap <a-p>( <c-v>u207d
        " x⁾
        inoremap <a-p>) <c-v>u207e
        " no superscript for letter q, it is used for superscript for œ, (ligature o and e) instead.
        " a-z
        " xᵃ
        inoremap <a-p>a <c-v>u1d43
        "xᵇ
        inoremap <a-p>b <c-v>u1d47
        " xᶜ`
        inoremap <a-p>c <c-v>u1d9c
        " xᵈ
        inoremap <a-p>d <c-v>u1d48
        " xᵉ
        inoremap <a-p>e <c-v>u1d49
        " xᶠ
        inoremap <a-p>f <c-v>u1da0
        " xᵍ
        inoremap <a-p>g <c-v>u1d4d
        " xʰ
        inoremap <a-p>h <c-v>u02b0
        " xⁱ
        inoremap <a-p>i <c-v>u2071
        " xʲ
        inoremap <a-p>j <c-v>u02b2
        " xᵏ
        inoremap <a-p>k <c-v>u1d4f
        " xˡ
        inoremap <a-p>l <c-v>u02e1
        " xᵐ
        inoremap <a-p>m <c-v>u1d50
        " xⁿ
        inoremap <a-p>n <c-v>u207f
        " xᵒ
        inoremap <a-p>o <c-v>u1d52
        " xᵖ
        inoremap <a-p>p <c-v>u1d56
        " xꟹ
        inoremap <a-p>q <c-v>ua7f9
        " xʳ
        inoremap <a-p>r <c-v>u02b3
        " xˢ
        inoremap <a-p>s <c-v>u02e2
        " xᵗ
        inoremap <a-p>t <c-v>u1d57
        " xᵘ
        inoremap <a-p>u <c-v>u1d58
        " xᵛ
        inoremap <a-p>v <c-v>u1d5b
        " xʷ
        inoremap <a-p>w <c-v>u02b7
        " xˣ
        inoremap <a-p>x <c-v>u02e3
        " xʸ
        inoremap <a-p>y <c-v>u02b8
        " xᶻ
        inoremap <a-p>z <c-v>u1dbb
        " A - Z superscript, no C, F, Q, S, X, Y, Z
        " S is used for Æ, capital ash letter.
        " xᴬ
        inoremap <a-p>A <c-v>u1d2c
        " xᴮ
        inoremap <a-p>B <c-v>u1d2e
        " xᴰ
        inoremap <a-p>D <c-v>u1d30
        " xᴱ
        inoremap <a-p>E <c-v>u1d31
        " xᴳ
        inoremap <a-p>G <c-v>u1d33
        " xᴴ
        inoremap <a-p>H <c-v>u1d34
        " xᴵ
        inoremap <a-p>I <c-v>u1d35
        " xᴶ
        inoremap <a-p>J <c-v>u1d36
        " xᴷ
        inoremap <a-p>K <c-v>u1d37
        " xᴸ
        inoremap <a-p>L <c-v>u1d38
        " xᴹ
        inoremap <a-p>M <c-v>u1d39
        " xᴺ
        inoremap <a-p>N <c-v>u1d3a
        " xᴼ
        inoremap <a-p>O <c-v>u1d3c
        " xᴾ
        inoremap <a-p>P <c-v>u1d3e
        " xᴿ
        inoremap <a-p>R <c-v>u1d3f
        " xᵀ
        inoremap <a-p>T <c-v>u1d40
        " xᵁ
        inoremap <a-p>U <c-v>u1d41
        " xⱽ
        inoremap <a-p>V <c-v>u2c7d
        " xᵂ
        inoremap <a-p>W <c-v>u1d42
        " xᴭ
        inoremap <a-p>S <c-v>u1d2d
        " xᵝ(beta)
        inoremap <a-p>b/ <c-v>u1d5d
        " xᵟ(delta)
        inoremap <a-p>d/ <c-v>u1d5f
        " xᵞ(gamma)
        inoremap <a-p>g/ <c-v>u1d5e
        " xᵠ{phi}
        inoremap <a-p>y/ <c-v>u1d60
        " xᶿ(theta)
        inoremap <a-p>q/ <c-v>u1dbf
        " xᵋ(epsilon)
        inoremap <a-p>e/ <c-v>u1d4b
endif
"}}}

" GUI Superscript: Alt-p family: {{{
if has("gui_running")
        " x¹
        inoremenu Literate.Superscript.x¹:\ <a-p>1 <c-v>u00b9
        " x²
        inoremenu Literate.Superscript.x²:\ <a-p>2 <c-v>u00b2
        " x³
        inoremenu Literate.Superscript.x³:\ <a-p>3 <c-v>u00b3
        " x⁴
        inoremenu Literate.Superscript.x⁴:\ <a-p>4 <c-v>u2074
        " x⁵
        inoremenu Literate.Superscript.x⁵:\ <a-p>5 <c-v>u2075
        " x⁶
        inoremenu Literate.Superscript.x⁶:\ <a-p>6 <c-v>u2076
        " x⁷
        inoremenu Literate.Superscript.x⁷:\ <a-p>7 <c-v>u2077
        " x⁸
        inoremenu Literate.Superscript.x⁸:\ <a-p>8 <c-v>u2078
        " x⁹
        inoremenu Literate.Superscript.x⁹:\ <a-p>9 <c-v>u2079
        " x⁰
        inoremenu Literate.Superscript.x⁰:\ <a-p>0 <c-v>u2070
        " x⁻, minus
        inoremenu Literate.Superscript.x⁻:\ <a-p>- <c-v>u207b
        " x⁺, plus
        inoremenu Literate.Superscript.x⁺:\ <a-p>+ <c-v>u207a
        " x⁼
        inoremenu Literate.Superscript.x⁼:\ <a-p>= <c-v>u207c
        " x⁽, left parenthesis
        inoremenu Literate.Superscript.x⁽:\ <a-p>( <c-v>u207d
        " x⁾
        inoremenu Literate.Superscript.x⁾:\ <a-p>) <c-v>u207e
        " no superscript for letter q, it is used for superscript for œ, (ligature o and e) instead.
        " a-z
        " xᵃ
        inoremenu Literate.Superscript.xᵃ:\ <a-p>a <c-v>u1d43
        "xᵇ
        inoremenu Literate.Superscript.xᵇ:\ <a-p>b <c-v>u1d47
        " xᶜ`
        inoremenu Literate.Superscript.xᶜ:\ <a-p>c <c-v>u1d9c
        " xᵈ
        inoremenu Literate.Superscript.xᵈ:\ <a-p>d <c-v>u1d48
        " xᵉ
        inoremenu Literate.Superscript.xᵉ:\ <a-p>e <c-v>u1d49
        " xᶠ
        inoremenu Literate.Superscript.xᶠ:\ <a-p>f <c-v>u1da0
        " xᵍ
        inoremenu Literate.Superscript.xᵍ:\ <a-p>g <c-v>u1d4d
        " xʰ
        inoremenu Literate.Superscript.xʰ:\ <a-p>h <c-v>u02b0
        " xⁱ
        inoremenu Literate.Superscript.xⁱ:\ <a-p>i <c-v>u2071
        " xʲ
        inoremenu Literate.Superscript.xʲ:\ <a-p>j <c-v>u02b2
        " xᵏ
        inoremenu Literate.Superscript.xᵏ:\ <a-p>k <c-v>u1d4f
        " xˡ
        inoremenu Literate.Superscript.xˡ:\ <a-p>l <c-v>u02e1
        " xᵐ
        inoremenu Literate.Superscript.xᵐ:\ <a-p>m <c-v>u1d50
        " xⁿ
        inoremenu Literate.Superscript.xⁿ:\ <a-p>n <c-v>u207f
        " xᵒ
        inoremenu Literate.Superscript.xᵒ:\ <a-p>o <c-v>u1d52
        " xᵖ
        inoremenu Literate.Superscript.xᵖ:\ <a-p>p <c-v>u1d56
        " xꟹ
        inoremenu Literate.Superscript.xꟹ:\ <a-p>q <c-v>ua7f9
        " xʳ
        inoremenu Literate.Superscript.xʳ:\ <a-p>r <c-v>u02b3
        " xˢ
        inoremenu Literate.Superscript.xˢ:\ <a-p>s <c-v>u02e2
        " xᵗ
        inoremenu Literate.Superscript.xᵗ:\ <a-p>t <c-v>u1d57
        " xᵘ
        inoremenu Literate.Superscript.xᵘ:\ <a-p>u <c-v>u1d58
        " xᵛ
        inoremenu Literate.Superscript.xᵛ:\ <a-p>v <c-v>u1d5b
        " xʷ
        inoremenu Literate.Superscript.xʷ:\ <a-p>w <c-v>u02b7
        " xˣ
        inoremenu Literate.Superscript.xˣ:\ <a-p>x <c-v>u02e3
        " xʸ
        inoremenu Literate.Superscript.xʸ:\ <a-p>y <c-v>u02b8
        " xᶻ
        inoremenu Literate.Superscript.xᶻ:\ <a-p>z <c-v>u1dbb
        " A - Z superscript, no C, F, Q, S, X, Y, Z
        " S is used for Æ, capital ash letter.
        " xᴬ
        inoremenu Literate.Superscript.xᴬ:\ <a-p>A <c-v>u1d2c
        " xᴮ
        inoremenu Literate.Superscript.xᴮ:\ <a-p>B <c-v>u1d2e
        " xᴰ
        inoremenu Literate.Superscript.xᴰ:\ <a-p>D <c-v>u1d30
        " xᴱ
        inoremenu Literate.Superscript.xᴱ:\ <a-p>E <c-v>u1d31
        " xᴳ
        inoremenu Literate.Superscript.xᴳ:\ <a-p>G <c-v>u1d33
        " xᴴ
        inoremenu Literate.Superscript.xᴴ:\ <a-p>H <c-v>u1d34
        " xᴵ
        inoremenu Literate.Superscript.xᴵ:\ <a-p>I <c-v>u1d35
        " xᴶ
        inoremenu Literate.Superscript.xᴶ:\ <a-p>J <c-v>u1d36
        " xᴷ
        inoremenu Literate.Superscript.xᴷ:\ <a-p>K <c-v>u1d37
        " xᴸ
        inoremenu Literate.Superscript.xᴸ:\ <a-p>L <c-v>u1d38
        " xᴹ
        inoremenu Literate.Superscript.xᴹ:\ <a-p>M <c-v>u1d39
        " xᴺ
        inoremenu Literate.Superscript.xᴺ:\ <a-p>N <c-v>u1d3a
        " xᴼ
        inoremenu Literate.Superscript.xᴼ:\ <a-p>O <c-v>u1d3c
        " xᴾ
        inoremenu Literate.Superscript.xᴾ:\ <a-p>P <c-v>u1d3e
        " xᴿ
        inoremenu Literate.Superscript.xᴿ:\ <a-p>R <c-v>u1d3f
        " xᵀ
        inoremenu Literate.Superscript.xᵀ:\ <a-p>T <c-v>u1d40
        " xᵁ
        inoremenu Literate.Superscript.xᵁ:\ <a-p>U <c-v>u1d41
        " xⱽ
        inoremenu Literate.Superscript.xⱽ:\ <a-p>V <c-v>u2c7d
        " xᵂ
        inoremenu Literate.Superscript.xᵂ:\ <a-p>W <c-v>u1d42
        " xᴭ
        inoremenu Literate.Superscript.xᴭ:\ <a-p>S <c-v>u1d2d
        " xᵝ(beta)
        inoremenu Literate.Superscript.xᵝ(beta):\ <a-p>b/ <c-v>u1d5d
        " xᵟ(delta)
        inoremenu Literate.Superscript.xᵟ(delta):\ <a-p>d/ <c-v>u1d5f
        " xᵞ(gamma)
        inoremenu Literate.Superscript.xᵞ(gamma):\ <a-p>g/ <c-v>u1d5e
        " xᵠ{phi}
        inoremenu Literate.Superscript.xᵠ(phi):\ <a-p>y/ <c-v>u1d60
        " xᶿ(theta)
        inoremenu Literate.Superscript.xᶿ(theta):\ <a-p>q/ <c-v>u1dbf
        " xᵋ
        inoremenu Literate.Superscript.xᵋ(epsilon):\ <a-p>e/ <c-v>u1d4b
endif
"}}}

" Subscript: Alt-b family {{{
if has("gui_running")
        " subscripts 9-0
        " x₉
        inoremap <a-b>9 <c-v>u2089
        " x₈
        inoremap <a-b>8 <c-v>u2088
        " x₇
        inoremap <a-b>7 <c-v>u2087
        " x₆
        inoremap <a-b>6 <c-v>u2086
        " x₅
        inoremap <a-b>5 <c-v>u2085
        " x₄
        inoremap <a-b>4 <c-v>u2084
        " x₃
        inoremap <a-b>3 <c-v>u2083
        " x₂
        inoremap <a-b>2 <c-v>u2082
        " x₁
        inoremap <a-b>1 <c-v>u2081
        " x₀
        inoremap <a-b>0 <c-v>u2080
        " x₊
        inoremap <a-b>+ <c-v>u208a
        " x₋
        inoremap <a-b>- <c-v>u208b
        " x₌
        inoremap <a-b>= <c-v>u208c
        " ₍
        inoremap <a-b>( <c-v>u208d
        " ₎
        inoremap <a-b>) <c-v>u208e
        " xₐ
        inoremap <a-b>a <c-v>u2090
        " ₑ
        inoremap <a-b>e <c-v>u2091
        " ₕ
        inoremap <a-b>h <c-v>u2095
        " xᵢ
        inoremap <a-b>i <c-v>u1d62
        " xⱼ
        inoremap <a-b>j <c-v>u2c7c
        " xₖ
        inoremap <a-b>k <c-v>u2096
        " xₗ
        inoremap <a-b>l <c-v>u2097
        " xₘ
        inoremap <a-b>m <c-v>u2098
        " xₙ
        inoremap <a-b>n <c-v>u2099
        " xₒ
        inoremap <a-b>o <c-v>u2092
        " xₚ
        inoremap <a-b>p <c-v>u209a
        " xᵣ
        inoremap <a-b>r <c-v>u1d63
        " xₛ
        inoremap <a-b>s <c-v>u209b
        " xₜ
        inoremap <a-b>t <c-v>u209c
        " xᵤ
        inoremap <a-b>u <c-v>u1d64
        " xᵥ
        inoremap <a-b>v <c-v>u1d65
        " xₓ
        inoremap <a-b>x <c-v>u2093
        " xᵦ beta
        inoremap <a-b>b/ <c-v>u1d66
        " xᵧ gamma
        inoremap <a-b>g/ <c-v>u1d67
        " xᵨ, rho
        inoremap <a-b>r/ <c-v>u1d68
        " xᵩ, phi
        inoremap <a-b>f/ <c-v>u1d69
        " xᵪ, chi
        inoremap <a-b>c/ <c-v>u1d6a
        " xₔ, schwa
        inoremap <a-b>w <c-v>u2094

endif
"}}}

" GUI: Subscript: Alt-b family {{{
if has("gui_running")
        " subscripts 9-0
        " x₉
        inoremenu Literate.Subscript.x₉:\ <a-b>9 <c-v>u2089
        " x₈
        inoremenu Literate.Subscript.x₈:\ <a-b>8 <c-v>u2088
        " x₇
        inoremenu Literate.Subscript.x₇:\ <a-b>7 <c-v>u2087
        " x₆
        inoremenu Literate.Subscript.x₆:\ <a-b>6 <c-v>u2086
        " x₅
        inoremenu Literate.Subscript.x₅:\ <a-b>5 <c-v>u2085
        " x₄
        inoremenu Literate.Subscript.x₄:\ <a-b>4 <c-v>u2084
        " x₃
        inoremenu Literate.Subscript.x₃:\ <a-b>3 <c-v>u2083
        " x₂
        inoremenu Literate.Subscript.x₂:\ <a-b>2 <c-v>u2082
        " x₁
        inoremenu Literate.Subscript.x₂:\ <a-b>1 <c-v>u2081
        " x₀
        inoremenu Literate.Subscript.x₀:\ <a-b>0 <c-v>u2080
        " x₊
        inoremenu Literate.Subscript.x₊:\ <a-b>+ <c-v>u208a
        " x₋
        inoremenu Literate.Subscript.x₋:\ <a-b>- <c-v>u208b
        " x₌
        inoremenu Literate.Subscript.x₌:\ <a-b>= <c-v>u208c
        " ₍
        inoremenu Literate.Subscript.x₍:\ <a-b>( <c-v>u208d
        " ₎
        inoremenu Literate.Subscript.x₎:\ <a-b>) <c-v>u208e
        " xₐ
        inoremenu Literate.Subscript.xₐ:\ <a-b>a <c-v>u2090
        " ₑ
        inoremenu Literate.Subscript.xₑ:\ <a-b>e <c-v>u2091
        " ₕ
        inoremenu Literate.Subscript.xₕ:\ <a-b>h <c-v>u2095
        " xᵢ
        inoremenu Literate.Subscript.xᵢ:\ <a-b>i <c-v>u1d62
        " xⱼ
        inoremenu Literate.Subscript.xⱼ:\ <a-b>j <c-v>u2c7c
        " xₖ
        inoremenu Literate.Subscript.xₖ:\ <a-b>k <c-v>u2096
        " xₗ
        inoremenu Literate.Subscript.xₗ:\ <a-b>l <c-v>u2097
        " xₘ
        inoremenu Literate.Subscript.xₘ:\ <a-b>m <c-v>u2098
        " xₙ
        inoremenu Literate.Subscript.xₙ:\ <a-b>n <c-v>u2099
        " xₒ
        inoremenu Literate.Subscript.xₒ:\ <a-b>o <c-v>u2092
        " xₚ
        inoremenu Literate.Subscript.xₚ:\ <a-b>p <c-v>u209a
        " xᵣ
        inoremenu Literate.Subscript.xᵣ:\ <a-b>r <c-v>u1d63
        " xₛ
        inoremenu Literate.Subscript.xₛ:\ <a-b>s <c-v>u209b
        " xₜ
        inoremenu Literate.Subscript.xₜ:\ <a-b>t <c-v>u209c
        " xᵤ
        inoremenu Literate.Subscript.xᵤ:\ <a-b>u <c-v>u1d64
        " xᵥ
        inoremenu Literate.Subscript.xᵥ:\ <a-b>v <c-v>u1d65
        " xₓ
        inoremenu Literate.Subscript.xₓ:\ <a-b>x <c-v>u2093
        " xᵦ beta
        inoremenu Literate.Subscript.xᵦ(beta):\ <a-b>b/ <c-v>u1d66
        " xᵧ gamma
        inoremenu Literate.Subscript.xᵧ(gamma):\ <a-b>g/ <c-v>u1d67
        " xᵨ, rho
        inoremenu Literate.Subscript.xᵨ(rho):\ <a-b>r/ <c-v>u1d68
        " xᵩ, phi
        inoremenu Literate.Subscript.xᵩ(phi):\ <a-b>f/ <c-v>u1d69
        " xᵪ, chi
        inoremenu Literate.Subscript.xᵪ(chi):\ <a-b>c/ <c-v>u1d6a
        " xₔ, schwa
        inoremenu Literate.Subscript.xₔ(schwa):\ <a-b>w <c-v>u2094
endif
"}}}

" Infix Operator: Alt-i family {{{
if has("gui_running")
        " Basic
        " ÷, division
        inoremap <a-i>/  <c-v>u00f7
        " ∘, function composition
        inoremap <a-i>o <c-v>u2218
        " ⋄, diamond operator
        inoremap <a-i>d <c-v>u22c4
        " ⋅, dot operator, or multiplication
        inoremap <a-i>. <c-v>u22c5
        " ⋆, star operator
        inoremap <a-i>* <c-v>u22c6
        " ∗, asterisk operator
        inoremap <a-i>c <c-v>u2217
        " ⨉, times
        inoremap <a-i>t <c-v>u2a09
        " ⨯, cross-product
        inoremap <a-i>c <c-v>u2a2f
        " ±, plus or minus
        inoremap <a-i>+ <c-v>u00b1
        " approximately equal to  ≅
        inoremap <a-i>= <c-v>u2245

        " Relation
        " ≠, not equal
        inoremap <a-i>=/ <c-v>u2260
        " ≡, idential to
        inoremap <a-i>== <c-v>u2261
        " ≔, defined as
        inoremap <a-i>:= <c-v>u2254
        " ≜ equivalent
        inoremap <a-i>=d <c-v>u225c
        " ≈, approximate
        inoremap <a-i>s  <c-v>u2248
        " ≉, not approximate
        inoremap <a-i>s/ <c-v>u2249
        " ≆, approximate not equal
        inoremap <a-i>ss <c-v>u2246
        " smaller or equal, ≤
        inoremap <a-i><= <c-v>u2264
        " bigger or equal ≥
        inoremap <a-i>>= <c-v>u2265
        " not smaller, ≮
        inoremap <a-i></ <c-v>u226e
        " not larger, ≯
        inoremap <a-i>>/ <c-v>u226f
        " not smaller or equal, ≰
        inoremap <a-i><% <c-v>u2270
        " not larger or equal, ≱
        inoremap <a-i>>% <c-v>u2271
        " way smaller, ≪
        inoremap <a-i><< <c-v>u226a
        " way bigger, ≫
        inoremap <a-i>>> <c-v>u226b
        " questioned equal to, ≟
        inoremap <a-i>=? <c-v>u225f
        " questioned less than, ⩻
        inoremap <a-i><? <c-v>u2a7b
        " questioned larger than,
        inoremap <a-i>>? <c-v>u2a7c
        " proportion, ∝
        inoremap <a-i>oc <c-v>u221d

        " Circled symbol  family
        " ⊕, circle-add symbol
        inoremap <a-i>o+ <c-v>u2295
        " ⊖, circle-minus symbol
        inoremap <a-i>o- <c-v>u2296
        " ⊛ circle-asterisk symbol
        inoremap <a-i>o* <c-v>u229b
        " ⨸, circled-division,
        inoremap <a-i>od <c-v>u2a38
        " ⊙, circle-dot symbol
        inoremap <a-i>o. <c-v>u2299
        " ⊗ circle tensor product
        inoremap <a-i>ox <c-v>u2297
        " ⊜ circle-equal symbol
        inoremap <a-i>o= <c-v>u229c
        " ⊘, circle-division symbol
        inoremap <a-i>o/ <c-v>u2298
        " ⊚, circle-composition
        inoremap <a-i>oo <c-v>u229a
        " ⨁ big circle-add
        inoremap <a-i>O+ <c-v>u2a01
        " ⨀, big circle-dot
        inoremap <a-i>O. <c-v>u2a00
        " big circle-times,
        inoremap <a-i>Ot <c-v>u2a02

        " Squared symbol faminly
        " ⊞, squared-plus
        inoremap <a-i>s+ <c-v>u229e
        " ⊟, squared-minus
        inoremap <a-i>s- <c-v>u229f
        " ⊠, squared-times
        inoremap <a-i>st <c-v>u22a0
        " ⊡, squaed-dot
        inoremap <a-i>s. <c-v>u22a1
endif
" }}}

" GUI: Infix Operator: Alt-i family {{{
if has("gui_running")
        " Basic
        " ÷, division
        inoremenu Literate.Infix\ Operators.Basic.÷(divison):\ <a-i>/  <c-v>u00f7
        " ∘, function composition
        inoremenu Literate.Infix\ Operators.Basic.∘(composition):\ <a-i>o <c-v>u2218
        " ⋄, diamond operator
        inoremenu Literate.Infix\ Operators.Basic.⋄(diamond):\ <a-i>d <c-v>u22c4
        " ⋅, dot operator, or multiplication
        inoremenu Literate.Infix\ Operators.Basic.⋅(dot):\ <a-i>. <c-v>u22c5
        " ⋆, star operator
        inoremenu Literate.Infix\ Operators.Basic.⋆(star-operator):\ <a-i>* <c-v>u22c6
        " ∗, convolution operator
        inoremenu Literate.Infix\ Operators.Basic.⨯(asterisk-convolution):\ <a-i>c <c-v>u2217
        " ⨉, times
        inoremenu Literate.Infix\ Operators.Basic.⨉(times):\ <a-i>t <c-v>u2a09
        " ⨯, cross-product
        inoremenu Literate.Infix\ Operators.Basic.⨯(cross-product):\ <a-i>c <c-v>u2a2f
        " ±, plus or minus
        inoremenu Literate.Infix\ Operators.Basic.±(plus-or-minus):\ <a-i>+ <c-v>u00b1
        " approximate or equal   ≅
        inoremenu Literate.Infix\ Operators.Basic.≅(approx-or-equal):\ <a-i>= <c-v>u2245

        " Relation
        " ≠, not equal
        inoremenu Literate.Infix\ Operators.Relation.≠(not-equal):\ <a-i>=/ <c-v>u2260
        " ≡, idential to
        inoremenu Literate.Infix\ Operators.Relation.≡(identical-to):\ <a-i>== <c-v>u2261
        " ≔, defined as
        inoremenu Literate.Infix\ Operators.Relation.≔(defined-as):\ <a-i>:= <c-v>u2254
        " ≜ equivalent
        inoremenu Literate.Infix\ Operators.Relation.≜(equivalent):\ <a-i>=d <c-v>u225c
        " ≈, approximate
        inoremenu Literate.Infix\ Operators.Relation.≈(approximate):\ <a-i>s <c-v>u2248
        " ≉, not approximate
        inoremenu Literate.Infix\ Operators.Relation.≉(not-approximate):\ <a-i>s/ <c-v>u2249
        " ≆, approximate not equal
        inoremenu Literate.Infix\ Operators.Relation.≆(approximate-not-equal):\ <a-i>ss <c-v>u2246
        " smaller or equal, ≤
        inoremenu Literate.Infix\ Operators.Relation.≤(less-or-equal):\ <a-i><= <c-v>u2264
        " bigger or equal ≥
        inoremenu Literate.Infix\ Operators.Relation.≥(greater-or-equal):\ <a-i>>= <c-v>u2265
        " not smaller, ≮
        inoremenu Literate.Infix\ Operators.Relation.≮(not-less):\ <a-i></ <c-v>u226e
        " not larger, ≯
        inoremenu Literate.Infix\ Operators.Relation.≯(not-larger):\ <a-i>>/ <c-v>u226f
        " not smaller or equal, ≰
        inoremenu Literate.Infix\ Operators.Relation.≰(not-smaller-or-equal):\ <a-i><% <c-v>u2270
        " not larger or equal, ≱
        inoremenu Literate.Infix\ Operators.Relation.≱(not-greater-or-equal):\ <a-i>>% <c-v>u2271
        " way smaller, ≪
        inoremenu Literate.Infix\ Operators.Relation.≪(way-smaller):\ <a-i><< <c-v>u226a
        " way bigger, ≫
        inoremenu Literate.Infix\ Operators.Relation.≫(way-bigger):\ <a-i>>> <c-v>u226b
        " questioned equal to, ≟
        inoremenu Literate.Infix\ Operators.Relation.≟(is-equal):\ <a-i>=? <c-v>u225f
        " questioned less than, ⩻
        inoremenu Literate.Infix\ Operators.Relation.⩻(is-less-than):\ <a-i><? <c-v>u2a7b
        " questioned larger than,
        inoremenu Literate.Infix\ Operators.Relation.⩼(is-larger-than):\ <a-i>>? <c-v>u2a7c
        " proportion, ∝
        inoremenu Literate.Infix\ Operators.Relation.∝(proportional):\ <a-i>oc <c-v>u221d

        " Circled symbol  family
        " ⊕, circle-add symbol
        inoremenu Literate.Infix\ Operators.Circled.⊕(circled-add):\ <a-i>o+ <c-v>u2295
        " ⊖, circle-minus symbol
        inoremenu Literate.Infix\ Operators.Circled.⊖(circled-minus):\ <a-i>o- <c-v>u2296
        " ⊛ circle-asterisk symbol
        inoremenu Literate.Infix\ Operators.Circled.⊛(circled-asterisk):\ <a-i>o* <c-v>u229b
        " ⨸, circled-division,
        inoremenu Literate.Infix\ Operators.Circled.⨸(circled-dvision):\ <a-i>od <c-v>u2a38
        " ⊙, circle-dot symbol
        inoremenu Literate.Infix\ Operators.Circled.⊙(circled-dot):\ <a-i>o. <c-v>u2299
        " ⊗ circle tensor product
        inoremenu Literate.Infix\ Operators.Circled.⊗(circled-tensor):\ <a-i>ox <c-v>u2297
        " ⊜ circle-equal symbol
        inoremenu Literate.Infix\ Operators.Circled.⊜(circled-equal):\ <a-i>o= <c-v>u229c
        " ⊘, circle-division symbol
        inoremenu Literate.Infix\ Operators.Circled.⊘(circled-division):\ <a-i>o/ <c-v>u2298
        " ⊚, circle-composition
        inoremenu Literate.Infix\ Operators.Circled.⊚(circled-compostion):\ <a-i>oo <c-v>u229a
        " ⨁ big circle-add
        inoremenu Literate.Infix\ Operators.Circled.⨁(big-circled-add):\ <a-i>O+ <c-v>u2a01
        " ⨀, big circle-dot
        inoremenu Literate.Infix\ Operators.Circled.⨀(big-circled-dot):\ <a-i>O. <c-v>u2a00
        " big circle-times,
        inoremenu Literate.Infix\ Operators.Circled.⨂(bigcircled-tiems):\ <a-i>Ot <c-v>u2a02

        " Squared symbol faminly
        " ⊞, squared-plus
        inoremenu Literate.Infix\ Operators.Squared.⊞(squared-add):\ <a-i>s+ <c-v>u229e
        " ⊟, squared-minus
        inoremenu Literate.Infix\ Operators.Squared.⊟(squared-minus):\ <a-i>s- <c-v>u229f
        " ⊠, squared-times
        inoremenu Literate.Infix\ Operators.Squared.⊠(squared-times):\ <a-i>st <c-v>u22a0
        " ⊡, squaed-dot
        inoremenu Literate.Infix\ Operators.Squared.⊡(squared-dot):\ <a-i>s. <c-v>u22a1
endif
" }}}

" Set and Order: Alt-s family: {{{
if has("gui_running")
        " set related
        " empty set, ∅
        inoremap <a-s>0 <c-v>u2205
        " union, ⋃
        inoremap <a-s>u <c-v>u22c3
        " intersection, ⋂
        inoremap <a-s>n <c-v>u22c2
        " full set, Ω, don't consufse with greek letter Omega Ω(937)
        inoremap <a-s>o <c-v>u2126
        " in set symbol, ∈
        inoremap <a-s>i <c-v>u2208
        " include in set ∋
        inoremap <a-s>h <c-v>u220b
        " not in set,  ∉
        inoremap <a-s>ni <c-v>u2209
        " not include in set, ∌
        inoremap <a-s>nh <c-v>u220c
        " exist,  ∃
        inoremap <a-s>e <c-v>u2203
        " not exist, ∄
        inoremap <a-s>ne <c-v>u2204
        " any in set, ∀
        inoremap <a-s>a <c-v>u2200
        " subset, ⊂
        inoremap <a-s>( <c-v>u2282
        " has subset, ⊃
        inoremap <a-s>) <c-v>u2283
        " subset or equal, ⊆
        inoremap <a-s>(= <c-v>u2286
        " has subset or equal, ⊇
        inoremap <a-s>)= <c-v>u2287
        " not subset, ⊄
        inoremap <a-s>(/ <c-v>u2284
        " not has subset, ⊅
        inoremap <a-s>)/ <c-v>u2285
        " not subset or equal, ⊈
        inoremap <a-s>(% <c-v>u2288
        " not has subset or equal, ⊉
        inoremap <a-s>)% <c-v>u2289

        " real set,  ℝ, ℝ
        inoremap <a-s>R <c-v>u211d
        " complex set, ℂ
        inoremap <a-s>C <c-v>u2102
        " set of quaternions, ℍ
        inoremap <a-s>H <c-v>u210d
        " set of natural numbers, ℕ
        inoremap <a-s>N <c-v>u2115
        " set of integers, ℤ
        inoremap <a-s>Z <c-v>u2124
        " set of prime numbers, ℙ
        inoremap <a-s>P <c-v>u2119
        " set of rational numbers, ℚ
        inoremap <a-s>Q <c-v>u211a

        " proceed order, ≺
        inoremap <a-s>< <c-v>u227a
        " succeed order, ≻
        inoremap <a-s>> <c-v>u227b
        " proceed or equal order, ≼
        inoremap <a-s><= <c-v>u227c
        " succeed or euqal order, ≽
        inoremap <a-s>>= <c-v>u227d
        " not proceed, ⊀
        inoremap <a-s></ <c-v>u2280
        " not succeed, ⊁
        inoremap <a-s>>/ <c-v>u2281
endif
" }}}

" GUI: Set and Order: Alt-s family {{{
if has("gui_running")
        " set related
        " empty set, ∅
        inoremenu Literate.Set\ and\ Order.∅(empty-set):\ <a-s>0 <c-v>u2205
        " union, ⋃
        inoremenu Literate.Set\ and\ Order.⋃(union):\ <a-s>u <c-v>u22c3
        " intersection, ⋂
        inoremenu Literate.Set\ and\ Order.⋂(intersection):\ <a-s>n <c-v>u22c2
        " full set, Ω, don't consufse with greek letter Omega Ω(937)
        inoremenu Literate.Set\ and\ Order.Ω(full-set):\ <a-s>o <c-v>u2126
        " in set symbol, ∈
        inoremenu Literate.Set\ and\ Order.∈(in-set):\ <a-s>i <c-v>u2208
        " include in set ∋
        inoremenu Literate.Set\ and\ Order.∋(set-has-element):\ <a-s>h <c-v>u220b
        " not in set,  ∉
        inoremenu Literate.Set\ and\ Order.∉(not-in-set):\ <a-s>ni <c-v>u2209
        " not include in set, ∌
        inoremenu Literate.Set\ and\ Order.∌(has-not-element):\ <a-s>nh <c-v>u220c
        " exist,  ∃
        inoremenu Literate.Set\ and\ Order.∃(exist):\ <a-s>e <c-v>u2203
        " not exist, ∄
        inoremenu Literate.Set\ and\ Order.∄(not-exist):\ <a-s>ne <c-v>u2204
        " any in set, ∀
        inoremenu Literate.Set\ and\ Order.∀(any):\ <a-s>a <c-v>u2200
        " subset, ⊂
        inoremenu Literate.Set\ and\ Order.⊂(is-subset):\ <a-s>( <c-v>u2282
        " has subset, ⊃
        inoremenu Literate.Set\ and\ Order.⊃(has-subset):\ <a-s>) <c-v>u2283
        " subset or equal, ⊆
        inoremenu Literate.Set\ and\ Order.⊆(is-subset-or-equal):\ <a-s>(= <c-v>u2286
        " has subset or equal, ⊇
        inoremenu Literate.Set\ and\ Order.⊇(has-subset-or-equal):\ <a-s>)= <c-v>u2287
        " not subset, ⊄
        inoremenu Literate.Set\ and\ Order.⊄(not-subset):\ <a-s>(/ <c-v>u2284
        " not has subset, ⊅
        inoremenu Literate.Set\ and\ Order.⊅(does-not-contain):\ <a-s>)/ <c-v>u2285
        " not subset or equal, ⊈
        inoremenu Literate.Set\ and\ Order.⊈(not-subset-or-equal):\ <a-s>(% <c-v>u2288
        " not has subset or equal, ⊉
        inoremenu Literate.Set\ and\ Order.⊉(does-not-contain-or-equal):\ <a-s>)% <c-v>u2289

        " real set,  ℝ, ℝ
        inoremenu Literate.Set\ and\ Order.ℝ(real-numbers):\ <a-s>R <c-v>u211d
        " complex set, ℂ
        inoremenu Literate.Set\ and\ Order.ℂ(complex-numbers):\ <a-s>C <c-v>u2102
        " set of quaternions, ℍ
        inoremenu Literate.Set\ and\ Order.ℍ(quaternions):\ <a-s>H <c-v>u210d
        " set of natural numbers, ℕ
        inoremenu Literate.Set\ and\ Order.ℕ(natural-numbers):\ <a-s>N <c-v>u2115
        " set of integers, ℤ
        inoremenu Literate.Set\ and\ Order.ℤ(complex-numbers):\ <a-s>Z <c-v>u2124
        " set of prime numbers, ℙ
        inoremenu Literate.Set\ and\ Order.ℙ(prime-numbers):\ <a-s>P <c-v>u2119
        " set of rational numbers, ℚ
        inoremenu Literate.Set\ and\ Order.ℚ(rational-numbers):\ <a-s>Q <c-v>u211a

        " proceed order, ≺
        inoremenu Literate.Set\ and\ Order.≺(proceed):\ <a-s>< <c-v>u227a
        " succeed order, ≻
        inoremenu Literate.Set\ and\ Order.≻(succeed):\ <a-s>> <c-v>u227b
        " proceed or equal order, ≼
        inoremenu Literate.Set\ and\ Order.≼(proceed-or-equal):\ <a-s><= <c-v>u227c
        " succeed or euqal order, ≽
        inoremenu Literate.Set\ and\ Order.≽(succeed-or-equal):\ <a-s>>= <c-v>u227d
        " not proceed, ⊀
        inoremenu Literate.Set\ and\ Order.⊀(not-proceed):\ <a-s></ <c-v>u2280
        " not succeed, ⊁
        inoremenu Literate.Set\ and\ Order.⊁(not-succeed):\ <a-s>>/ <c-v>u2281
endif
" }}}

" Integral: Alt-i family {{{
if has("gui_running")
        " integral family
        " 1-dime integral, ∫
        inoremap <a-i>1 <c-v>u222b
        " 2-dim integral, ∬
        inoremap <a-i>2 <c-v>u222c
        " 3-diem integral, ∭
        inoremap <a-i>3 <c-v>u222d
        " curve integral, ∮
        inoremap <a-i>f1 <c-v>u222e
        " surface integral, ∯
        inoremap <a-i>f2 <c-v>u222f
        " volume integral,∰
        inoremap <a-i>f3 <c-v>u2230
        " clockwiase integral, ∱
        inoremap <a-i>, <c-v>u2231
        "" counter clockwise integral, ⨑
        inoremap <a-i>c <c-v>u2a11
        " clockwise contour integral, ∲
        inoremap <a-i>f, <c-v>u2232
        " counter clockwise contour integral, ∳
        inoremap <a-i>fc <c-v>u2233
        " Furier transformation, ℱ
        inoremap <a-i>F <c-v>u2131
endif
" }}}

" GUI: Integral: Alt-i family {{{
if has("gui_running")
        " 1-dime integral, ∫
        inoremenu Literate.Integral.∫(1-dim-integral):\ <a-i>1 <c-v>u222b
        " 2-dim integral, ∬
        inoremenu Literate.Integral.∬(2-dim-integral):\ <a-i>2 <c-v>u222c
        " 3-diem integral, ∭
        inoremenu Literate.Integral.∭(3-dim-integral):\ <a-i>3 <c-v>u222d
        " curve integral, ∮
        inoremenu Literate.Integral.∮(curve-integral):\ <a-i>f1 <c-v>u222e
        " surface integral, ∯
        inoremenu Literate.Integral.∯(surface-integral):\ <a-i>f2 <c-v>u222f
        " volume integral,∰
        inoremenu Literate.Integral.∰(volume-integral):\ <a-i>f3 <c-v>u2230
        " clockwiase integral, ∱
        inoremenu Literate.Integral.∱(clockwise-integral):\ <a-i>>, <c-v>u2231
        "" counter clockwise integral,⨑
        inoremenu Literate.Integral.⨑(counter-clockwise-integral):\ <a-i>c <c-v>u2a11
        " clockwise contour integral, ∲
        inoremenu Literate.Integral.∲(clockwise-contour-integral):\ <a-i>f, <c-v>u2232
        " counter clockwise contour integral, ∳
        inoremenu Literate.Integral.∳(counter-clockwise-contour-integral):\ <a-i>fc <c-v>u2233
        " Furier transformation, ℱ
        inoremenu Literate.Integral.ℱ(Furier-transformation):\ <a-i>F <c-v>u2131
endif
" }}}

" Constants and Units: Alt-e family {{{
if has("gui_running")
        " infinity, ∞
        inoremap <a-e>8 <c-v>u221e
        " Aleph, ℵ
        inoremap <a-e>A <c-v>u2135
        " Euler constant, ℯ
        inoremap <a-e>e <c-v>u212f
        " Planck constant,  ℎ
        inoremap <a-e>h <c-v>u210e
        " normalized Planck constant, ℏ
        inoremap <a-e>h- <c-v>u210f
        " math pi,ℼ  don't confuse with greek leter π(960)
        inoremap <a-e>p <c-v>u213c
        " imaginary unit i,ⅈ  don't confuse with english letter i
        inoremap <a-e>i <c-v>u2148
        " imaginary unit j,ⅉ  don't confuse with english letter j
        inoremap <a-e>j <c-v>u2149
        " Clesius, ℃
        inoremap <a-e>C <c-v>u2103
        " Fahrenheit, ℉,
        inoremap <a-e>F <c-v>u2109
        " Degree symbol
        inoremap <a-e>D <c-v>u00b0
endif
" }}}

" GUI: Constants and Units: Alt-e family {{{
if has("gui_running")
        " infinity, ∞
        inoremenu Literate.Constants\ and\ Units.∞(infinity):\ <a-e>8 <c-v>u221e
        " Aleph, ℵ
        inoremenu Literate.Constants\ and\ Units.ℵ(Aleph):\ <a-e>A <c-v>u2135
        " natural log base, ℯ
        inoremenu Literate.Constants\ and\ Units.ℯ(natural-log-base):\ <a-e>e <c-v>u212f
        " Planck constant,  ℎ
        inoremenu Literate.Constants\ and\ Units.ℎ(Planck-constant):\ <a-e>h <c-v>u210e
        " normalized Planck constant, ℏ
        inoremenu Literate.Constants\ and\ Units.ℏ(normalized-Plank-constant):\ <a-e>h- <c-v>u210f
        " math pi,ℼ  don't confuse with greek leter π(960)
        inoremenu Literate.Constants\ and\ Units.ℼ(math-pi):\ <a-e>p <c-v>u213c
        " imaginary unit i,ⅈ  don't confuse with english letter i
        inoremenu Literate.Constants\ and\ Units.ⅈ(imaginary-unit-i):\ <a-e>i <c-v>u2148
        " imaginary unit j,ⅉ  don't confuse with english letter j
        inoremenu Literate.Constants\ and\ Units.ⅉ(imaginary-unit-j):\ <a-e>j <c-v>u2149
        " Clesius, ℃
        inoremenu Literate.Constants\ and\ Units.℃(Celsius-degree):\ <a-e>C <c-v>u2103
        " Fahrenheit, ℉,
        inoremenu Literate.Constants\ and\ Units.℉(Fahrenheit-degree):\ <a-e>F <c-v>u2109
        " Degree symbol
        inoremenu Literate.Constants\ and\ Units.°(degree):\ <a-e>D <c-v>u00b0
endif
" }}}

" French specific letters: alt-f family{{{
if has("gui_running")
        " Acute family,l'accent aigu
        " <a-'>e  acute e, é
        inoremap <a-f>'e <c-v>u00e9
        " <a-'>E acute E, É
        inoremap <a-f>'E <c-v>u00c9

        " Grave family, l'accent grave, à/è/ì/ò/ù
        " grave a, à
        inoremap <a-f>`a <c-v>u00e0
        " grave e, è
        inoremap <a-f>`e <c-v>u00e8
        " grave i, ì
        inoremap <a-f>`i <c-v>u00ec
        " grave o, ò
        inoremap <a-f>`o <c-v>u00f2
        " grave u, ù
        inoremap <a-f>`u <c-v>u00f9

        " The trema family,l'accent tréma, ë/ï/ü
        " trema is also known as diaeresis (dy-ERR-ee-sis) .
        " trema e, ë
        inoremap <a-f>ee <c-v>u00eb
        " trema i, ï
        inoremap <a-f>ii <c-v>u00ef
        " trema u, ü
        inoremap <a-f>uu <c-v>u00fc

        " The circumflex family,l'accent circonflexe, â/ê/î/ô/û
        " circumflex a, â
        inoremap <a-f>a <c-v>u00e2
        " circumflex e, ê
        inoremap <a-f>e <c-v>u00ea
        " circumflex i, î
        inoremap <a-f>i <c-v>u00ee
        " circumflex o, ô
        inoremap <a-f>o <c-v>u00f4
        " circumflex u, û
        inoremap <a-f>u <c-v>u00fb

        " the cedilla (la cédille), ç
        inoremap <a-f>c <c-v>u00e7
        " big C with cedilla, Ç
        inoremap <a-f>C <c-v>u00c7
        " The ash symbol,æ
        inoremap <a-f>s <c-v>00e6
        " The big ash symbol, Æ
        inoremap <a-f>S <c-v>00C6
endif
" }}}

" GUI: French specific letters: Alt-f family
if has("gui_running")
        " Acute family,l'accent aigu
        " <a-'>e  acute e, é
        inoremenu Literate.French\ specific\ Letters.é(acute-e):\ <a-f>'e <c-v>u00e9
        " <a-'>E acute E, É
        inoremenu Literate.French\ specific\ Letters.É(acute-E):\ <a-f>'E <c-v>u00c9
        " Grave family, l'accent grave, à/è/ì/ò/ù
        " grave a, à
        inoremenu Literate.French\ specific\ Letters.à(grave-a):\ <a-f>`a <c-v>u00e0
        " grave e, è
        inoremenu Literate.French\ specific\ Letters.è(grave-e):\ <a-f>`e <c-v>u00e8
        " grave i, ì
        inoremenu Literate.French\ specific\ Letters.ì(grave-i):\ <a-f>`i <c-v>u00ec
        " grave o, ò
        inoremenu Literate.French\ specific\ Letters.ò(grave-o):\ <a-f>`o <c-v>u00f2
        " grave u, ù
        inoremenu Literate.French\ specific\ Letters.ù(grave-u):\ <a-f>`u <c-v>u00f9

        " The trema family,l'accent tréma, ë/ï/ü
        " trema is also known as diaeresis (dy-ERR-ee-sis) .
        " trema e, ë
        inoremenu Literate.French\ specific\ Letters.ë(trema-e):\ <a-f>ee <c-v>u00eb
        " trema i, ï
        inoremenu Literate.French\ specific\ Letters.ï(trema-i):\ <a-f>ii <c-v>u00ef
        " trema u, ü
        inoremenu Literate.French\ specific\ Letters.ü(trema-u):\ <a-f>uu <c-v>u00fc

        " The circumflex family,l'accent circonflexe, â/ê/î/ô/û
        " circumflex a, â
        inoremenu Literate.French\ specific\ Letters.â(circumflex-a):\ <a-f>a <c-v>u00e2
        " circumflex e, ê
        inoremenu Literate.French\ specific\ Letters.ê(circumflex-e):\ <a-f>e <c-v>u00ea
        " circumflex i, î
        inoremenu Literate.French\ specific\ Letters.î(circumflex-i):\ <a-f>i <c-v>u00ee
        " circumflex o, ô
        inoremenu Literate.French\ specific\ Letters.ô(circumflex-o):\ <a-f>o <c-v>u00f4
        " circumflex u, û
        inoremenu Literate.French\ specific\ Letters.û(circumflex-u):\ <a-f>u <c-v>u00fb

        " the cedilla (la cédille), ç
        inoremenu Literate.French\ specific\ Letters.ç(cedilla-c):\ <a-f>c <c-v>u00e7
        " big C with cedilla, Ç
        inoremenu Literate.French\ specific\ Letters.Ç(Cedilla-C):\ <a-f>C <c-v>u00c7
        " The ash symbol,æ
        inoremenu Literate.French\ specific\ Letters.æ(ash-ae):\ <a-f>s <c-v>u00e6
        " The big ash symbol, Æ
        inoremenu Literate.French\ specific\ Letters.Æ(Ash-AE):\ <a-f>S <c-v>00C6
endif
" }}}

if has("gui_running")
        " bullet symbol,  b for bullet-like, ∙
        inoremap <a-j>b. <c-v>u2219
        " asterisk, ∗
        inoremap <a-j>b* <c-v>u2217
        " ballot box ☐
        inoremap <a-j>bb <c-v>u2610
        " ballot box with x, ☒
        inoremap <a-j>bx <c-v>u2612
        " cross mark, ❌,
        inoremap <a-j>xx <c-v>u274c
        " bollot box with check, ☑
        inoremap <a-j>by <c-v>u2611
        " white heavy check mark, ✅
        inoremap <a-j>yy <c-v>u2705

        " Miscellaneous
        " mid dot, ·, don't confuse with dot operator ⋅
        inoremap <a-j>-. <c-v>u00b7
        " ellipses horizontal, …
        inoremap <a-j>.. <c-v>u2026
        " (mathematical) left angle bracket ⟨
        inoremap <a-j>[[ <c-v>u27e8
        " (methemetical) right angle bracket, ⟩
        inoremap <a-j>]] <c-v>u27e9
        " left guillemet, in latin 1 encoding, «, as quotatoin and ditto mark.
        inoremap <a-j>\[ <c-v>u00ab
        " right guillemet, in latin 1 encoding, », as quotation
        " as quotation and ditto mark
        inoremap <a-j>\] <c-v>u00bb
        " copyright mark, captital O and c,©.
        inoremap <a-j>Oc <c-v>u00a9
        " trademark character, ®
        inoremap <a-j>Or <c-v>u00ae

endif
"  }}}

"Folding method for this file {{{
set modelines=2
" vim:foldmethod=marker:foldlevel=0
" }}}
